distPred <- predict(lmMod, testData)  # predict distance
summary(lnMod)
#create model with training data, predict on test data
lmMod <- lm(dist ~ speed, data=trainingData)  # build the model
distPred <- predict(lmMod, testData)  # predict distance
summary(lnMod)
#create model with training data, predict on test data
lnMod <- lm(dist ~ speed, data=trainingData)  # build the model
distPred <- predict(lnMod, testData)  # predict distance
summary(lnMod)
# Measure accuracy by calculating correlation between predicted values and actual values
actuals_preds <- data.frame(cbind(actuals=testData$dist, predicteds=distPred))  # make actuals_predicteds dataframe.
correlation_accuracy <- cor(actuals_preds)  # 82.7%
(correlation_accuracy <- cor(actuals_preds))  # 82.7%
head(actuals_preds)
# MinMax Accuracy = mean([min(actuals, predicted)] / [max(actuals, predicted)])
# MAPE = mean([abs(predicted - actuals)] / actuals)
(min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max)))
(mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals))
# ------------------------------------ K Fold Cross Validation ------------------------------------------------
packages.install("DAAG")
# ------------------------------------ K Fold Cross Validation ------------------------------------------------
package.install("DAAG")
library(DAAG)
# ------------------------------------ K Fold Cross Validation ------------------------------------------------
install.package("DAAG")
# ------------------------------------ K Fold Cross Validation ------------------------------------------------
install.packages("DAAG")
library(DAAG)
library(DAAG)
cvResults <- suppressWarnings(CVlm(df=cars, form.lm=dist ~ speed, m=5, dots=FALSE, seed=29, legend.pos="topleft",  printit=FALSE, main="Small symbols are predicted values while bigger ones are actuals."));  # performs the CV
attr(cvResults, 'ms')  # => 251.2783 mean squared error
install.packages(shiny)
install.packages("shiny")
library(shiny)
ui = fluidPage("hello world")
server = function() {}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage("hello world")
server = function() {input, output}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage("hello world")
server = function() {input, output}
shinyApp(ui = ui, server = server)
View(actuals_preds)
library(shiny)
ui = fluidPage("hello world")
server = function() {input, output}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage("hello world")
server = function(input, output) {}
shinyApp(ui = ui, server = server)
rm(list=ls())
getwd()
setwd('/home/acaruso/dev/R/shiny_apps')
getwd()
ls
getwd()
setwd("/home/acaruso/dev/R/shiny_apps/tutorial")
getwd()
load("~/dev/R/shiny_apps/tutorial/appTemplate.R")
load("~/dev/R/shiny_apps/tutorial/appTemplate.R")
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
# output() functions
)
server = function(input, output) {}
shinyApp(ui = ui, server = server)
?sliderInput
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100,
width = 50%)
# output() functions
)
server = function(input, output) {}
shinyApp(ui = ui, server = server)
slider.R
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100,
width = '50%')
# output() functions
)
server = function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100,
width = '50%'),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({ hist(rnorm(100)) })
}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100,
width = '50%'),
plotOutput("hist")
)
server = function(input, output) {
title = "100 random values"
output$hist = renderPlot({ hist(rnorm(100), main = title) })
}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100,
width = '50%'),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = "100 random values"
hist(rnorm(100), main = title)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100,
width = '50%'),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = "100 random values"
hist(rnorm(100), main = title, breaks=50)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100,
width = '50%'),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = "100 random values"
hist(rnorm(100), main = title, breaks=25)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 1000,
width = '50%'),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = "100 random values"
hist(rnorm(input$num), main = title, breaks=25)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000,
width = '50%'),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = "100 random values"
hist(rnorm(input$num), main = title, breaks=100)
})
}
shinyApp(ui = ui, server = server)
?hist
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000,
width = '50%'),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = "n random values"
hist(rnorm(input$num), main = title, breaks=100, col = 'green')
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000,
width = '50%'),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = "n random values"
hist(rnorm(input$num), main = title, breaks=100, col = 'blue')
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000,
width = '50%'),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = paste(input$num, "random values")
hist(rnorm(input$num), main = title, breaks=100, col = 'blue')
})
}
shinyApp(ui = ui, server = server)
?sliderInput
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000,
width = '50%', animate=TRUE),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = paste(input$num, "random values")
hist(rnorm(input$num), main = title, breaks=100, col = 'blue')
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000,
width = '50%', animate=TRUE),
animationOptions(interval = 1000, loop = FALSE, playButton = NULL,
pauseButton = NULL),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = paste(input$num, "random values")
hist(rnorm(input$num), main = title, breaks=100, col = 'blue')
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000,
width = '50%', animate=TRUE),
animationOptions(interval = 1000, loop = FALSE, playButton = NULL, pauseButton = NULL),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = paste(input$num, "random values")
hist(rnorm(input$num), main = title, breaks=100, col = 'blue')
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000,
width = '50%', animate=animationOptions(interval = 1000, loop = TRUE, playButton = NULL, pauseButton = NULL)),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = paste(input$num, "random values")
hist(rnorm(input$num), main = title, breaks=100, col = 'blue')
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000, step=500,
width = '50%', animate=animationOptions(interval = 1000, loop = TRUE, playButton = NULL, pauseButton = NULL)),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = paste(input$num, "random values")
hist(rnorm(input$num), main = title, breaks=100, col = 'blue')
})
}
shinyApp(ui = ui, server = server)
runGitHub( "first-shiny-app", "acaruso7")
runGitHub( "first-shiny-app", "acaruso7")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='acaruso7', token='E3834C5F147D9B2686BCD97521D456A8', secret='H79ScQq1ZRNWqPlgBGKksnEjIslQCHF5Fcp3LJaN')
library(shiny)
library(rsconnect)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000, step=500,
width = '50%', animate=animationOptions(interval = 1000, loop = TRUE, playButton = NULL, pauseButton = NULL)),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = paste(input$num, "random values")
hist(rnorm(input$num), main = title, breaks=100, col = 'blue')
})
}
shinyApp(ui = ui, server = server)
rsconnect::deployApp('~/dev/R/shiny-apps/first-shiny-app/app.R')
library(shiny)
library(rsconnect)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000, step=500,
width = '50%', animate=animationOptions(interval = 1000, loop = TRUE, playButton = NULL, pauseButton = NULL)),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = paste(input$num, "random values")
hist(rnorm(input$num), main = title, breaks=100, col = 'blue')
})
}
shinyApp(ui = ui, server = server)
rsconnect::deployApp('~/dev/R/shiny_apps/first-shiny-app/app.R')
setwd('/home/acaruso/dev/R/shiny_apps/first-shiny-app')
library(shiny)
library(rsconnect)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000, step=500,
width = '50%', animate=animationOptions(interval = 1000, loop = TRUE, playButton = NULL, pauseButton = NULL)),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = paste(input$num, "random values")
hist(rnorm(input$num), main = title, breaks=100, col = 'blue')
})
}
shinyApp(ui = ui, server = server)
rsconnect::deployApp('~/dev/R/shiny_apps/first-shiny-app')
library(shiny)
library(rsconnect)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000, step=500,
width = '50%', animate=animationOptions(interval = 1000, loop = TRUE, playButton = NULL, pauseButton = NULL)),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = paste(input$num, "random values")
hist(rnorm(input$num), main = title, breaks=100, col = 'blue')
})
}
shinyApp(ui = ui, server = server)
rsconnect::deployApp('~/dev/R/shiny_apps/first-shiny-app')
library(shiny)
library(rsconnect)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000, step=500,
width = '50%', animate=animationOptions(interval = 1000, loop = TRUE, playButton = NULL, pauseButton = NULL)),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = paste(input$num, "random values")
hist(rnorm(input$num), main = title, breaks=100, col = 'blue')
})
}
shinyApp(ui = ui, server = server)
# rsconnect::deployApp('app.R')
deployApp()
library(rsconnect)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 200, min = 1, max = 10000, step=500,
width = '50%', animate=animationOptions(interval = 1000, loop = TRUE, playButton = NULL, pauseButton = NULL)),
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
title = paste(input$num, "random values")
hist(rnorm(input$num), main = title, breaks=100, col = 'blue')
})
}
shinyApp(ui = ui, server = server)
getwd()
runApp()
getwd()
setwd('/home/acaruso/dev/R/shiny_apps/Correlation-Analyzer')
getwd()
data = read.csv('kc_house_data.csv')
head(data)
typeof(data)
csv = read.csv('kc_house_data.csv')
df = as.data.frame(csv)
head(df)
typeof(df)
df = read.table(file='kc_house_data.csv', header=TRUE, sep=',')
# df = as.data.frame(csv)
typeof(df)
df = read.table(file='kc_house_data.csv', header=TRUE, sep=',')
df = as.data.frame(csv)
typeof(df)
df = read.csv(file='kc_house_data.csv', header=TRUE, sep=',')
print(df[1,])
print(colnames(df))
print(typeof(colnames(df)))
print(colnames(df)[2])
head(df["date"])
library(ggplot)
library(ggplot2)
ggplot(data=df) + geom_point(mapping=aes(x = df["sqft_living"], y = df["price"]))
ggplot(data=df) + geom_point(mapping=aes(x = "sqft_living", y = "price"))
print(typeof(as.data.frame(df)))
df = read.csv(file='kc_house_data.csv', header=TRUE, sep=',')
print(class(df))
ggplot(data=df) + geom_point(mapping=aes(x = "sqft_living", y = "sqft_lot"))
ggplot(data=df) + geom_point(mapping=aes(x = sqft_living, y = price))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list=ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rland::last_error()
rlang::last_error()
runApp()
runApp()
runApp()
runApp()
runApp()
rlang::last_error()
rlang::last_trace()
runApp()
runApp()
runApp()
cars
ggplot(cars, aes_string(x=speed, y=dist)) +
geom_point()
ggplot(cars, aes_string(x="speed", y="dist")) + geom_point()
ggplot(NULL, aes_string(x="speed", y="dist")) + geom_point()
runApp()
rlang::last_error()
rlang::last_trace()
runApp()
runApp()
runApp()
?selectInput
runApp()
install.packages("corrplot")
runApp()
runApp()
runApp()
